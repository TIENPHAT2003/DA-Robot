# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '.\UI\Header.ui'
#
# Created by: PyQt5 UI code generator 5.15.11
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from Storage_Signal import signal
from Recipe_Kinematics import Forward_Kinematics
import serial.tools.list_ports
import time
import math

class Ui_Header(object):

#region UI

    #Set variation
    def __init__(self): 
        self.Drag_Drop = False
        self.Pause_Run = False
        self.Number_Mode = 0
        self.Name_mode = ["Kinematics", "Auto Grab", "Manupilation"]
        self.ser = serial.Serial()
        self.ser.dtr = False
        self.thread = UpdateThread()
        self.Thetas = [0, 0, 0, 0]
        self.run = False
        self.t1 = 0
        self.t2 = 0
        self.t3 = 0
        self.t4 = 0
        self.px = 900
        self.py = 900
        self.pz = 900

    def setupUi(self, Header):
        self.L_Menu = QtWidgets.QLabel(Header)
        self.L_Menu.setGeometry(QtCore.QRect(120, 15, 341, 81))
        font = QtGui.QFont()
        font.setFamily("Rockwell")
        font.setPointSize(40)
        self.L_Menu.setFont(font)
        self.L_Menu.setAlignment(QtCore.Qt.AlignCenter)
        self.L_Menu.setObjectName("L_Menu")
        self.F_Control = QtWidgets.QFrame(Header)
        self.F_Control.setGeometry(QtCore.QRect(480, 10, 561, 101))
        self.F_Control.setStyleSheet("QFrame{\n"
"    border: 2px solid;\n"
"    border-radius: 20px;\n"
"    background-color: rgb(240, 240, 240);\n"
"}")
        self.F_Control.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.F_Control.setFrameShadow(QtWidgets.QFrame.Raised)
        self.F_Control.setObjectName("F_Control")
        self.B_Home = QtWidgets.QPushButton(self.F_Control)
        self.B_Home.setGeometry(QtCore.QRect(20, 15, 70, 70))
        self.B_Home.setStyleSheet("QPushButton{\n"
"    border:none;\n"
"    background-color: rgb(240,240,240);\n"
"}")
        self.B_Home.setText("")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(".\\UI\\../picture/home.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.B_Home.setIcon(icon)
        self.B_Home.setIconSize(QtCore.QSize(70, 70))
        self.B_Home.setObjectName("B_Home")
        self.B_Zero = QtWidgets.QPushButton(self.F_Control)
        self.B_Zero.setGeometry(QtCore.QRect(100, 20, 60, 60))
        self.B_Zero.setStyleSheet("QPushButton{\n"
"    border:none;\n"
"    background-color: rgb(240,240,240);\n"
"}")
        self.B_Zero.setText("")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap(".\\UI\\../picture/zero.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.B_Zero.setIcon(icon1)
        self.B_Zero.setIconSize(QtCore.QSize(60, 60))
        self.B_Zero.setObjectName("B_Zero")
        self.B_Reset = QtWidgets.QPushButton(self.F_Control)
        self.B_Reset.setGeometry(QtCore.QRect(180, 20, 60, 60))
        self.B_Reset.setStyleSheet("""
            QPushButton{
                border:none;
                background-color: rgb(240,240,240);
            }""")
        self.B_Reset.setText("")
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap(".\\UI\\../picture/reset.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.B_Reset.setIcon(icon2)
        self.B_Reset.setIconSize(QtCore.QSize(60, 60))
        self.B_Reset.setObjectName("B_Reset")
        self.B_Drag_Drop = QtWidgets.QPushButton(self.F_Control)
        self.B_Drag_Drop.setGeometry(QtCore.QRect(260, 20, 60, 60))
        self.B_Drag_Drop.setStyleSheet("QPushButton{\n"
"    border:none;\n"
"    background-color: rgb(240,240,240);\n"
"}")
        self.B_Drag_Drop.setText("")
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap(".\\UI\\../picture/grab.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.B_Drag_Drop.setIcon(icon3)
        self.B_Drag_Drop.setIconSize(QtCore.QSize(60, 60))
        self.B_Drag_Drop.setObjectName("B_Drag_Drop")
        self.B_Pause_Run = QtWidgets.QPushButton(self.F_Control)
        self.B_Pause_Run.setGeometry(QtCore.QRect(340, 20, 60, 60))
        self.B_Pause_Run.setStyleSheet("QPushButton{\n"
"    border:none;\n"
"    background-color: rgb(240,240,240);\n"
"}")
        self.B_Pause_Run.setText("")
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap(".\\UI\\../picture/pause.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.B_Pause_Run.setIcon(icon4)
        self.B_Pause_Run.setIconSize(QtCore.QSize(60, 60))
        self.B_Pause_Run.setObjectName("B_Pause_Run")
        self.B_Info = QtWidgets.QPushButton(self.F_Control)
        self.B_Info.setGeometry(QtCore.QRect(420, 20, 60, 60))
        self.B_Info.setStyleSheet("QPushButton{\n"
"    border:none;\n"
"    background-color: rgb(240,240,240);\n"
"}")
        self.B_Info.setText("")
        icon5 = QtGui.QIcon()
        icon5.addPixmap(QtGui.QPixmap(".\\UI\\../picture/information.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.B_Info.setIcon(icon5)
        self.B_Info.setIconSize(QtCore.QSize(60, 60))
        self.B_Info.setObjectName("B_Info")
        self.B_Swich = QtWidgets.QPushButton(self.F_Control)
        self.B_Swich.setGeometry(QtCore.QRect(490, 20, 60, 60))
        self.B_Swich.setStyleSheet("QPushButton{\n"
"    border:none;\n"
"    background-color: rgb(240,240,240);\n"
"}")
        self.B_Swich.setText("")
        icon6 = QtGui.QIcon()
        icon6.addPixmap(QtGui.QPixmap(".\\UI\\../picture/out.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.B_Swich.setIcon(icon6)
        self.B_Swich.setIconSize(QtCore.QSize(60, 60))
        self.B_Swich.setObjectName("B_Swich")
        self.F_Connect = QtWidgets.QFrame(Header)
        self.F_Connect.setGeometry(QtCore.QRect(1060, 10, 331, 100))
        self.F_Connect.setStyleSheet("QFrame{\n"
"    border: 2px solid;\n"
"    border-radius: 10px;\n"
"    background-color: rgb(240, 240, 240);\n"
"}")
        self.F_Connect.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.F_Connect.setFrameShadow(QtWidgets.QFrame.Raised)
        self.F_Connect.setObjectName("F_Connect")
        self.L_Port_name = QtWidgets.QLabel(self.F_Connect)
        self.L_Port_name.setGeometry(QtCore.QRect(10, 10, 141, 35))
        font = QtGui.QFont()
        font.setFamily("Century")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.L_Port_name.setFont(font)
        self.L_Port_name.setStyleSheet("QLabel{\n"
"    border: none;\n"
"}")
        self.L_Port_name.setObjectName("L_Port_name")
        self.L_Baud_rate = QtWidgets.QLabel(self.F_Connect)
        self.L_Baud_rate.setGeometry(QtCore.QRect(10, 53, 141, 35))
        font = QtGui.QFont()
        font.setFamily("Century")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.L_Baud_rate.setFont(font)
        self.L_Baud_rate.setStyleSheet("QLabel{\n"
"    border: none;\n"
"}")
        self.L_Baud_rate.setObjectName("L_Baud_rate")
        self.CB_Port_name = QtWidgets.QComboBox(self.F_Connect)
        self.CB_Port_name.setGeometry(QtCore.QRect(160, 10, 91, 31))
        palette = QtGui.QPalette()
        self.CB_Port_name.setPalette(palette)
        font = QtGui.QFont()
        font.setFamily("Cambria")
        font.setPointSize(14)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        font.setStyleStrategy(QtGui.QFont.PreferDefault)
        self.CB_Port_name.setFont(font)
        self.CB_Port_name.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.CB_Port_name.setContextMenuPolicy(QtCore.Qt.DefaultContextMenu)
        self.CB_Port_name.setStyleSheet("QComboBox{\n"
"    font: 15px Cambria;         \n"
"}\n"
"QComboBox QAbstractItemView {\n"
"    border: 1px solid;\n"
"    border-radius : 0px;\n"
"}")
        self.CB_Port_name.setEditable(False)
        self.CB_Port_name.setCurrentText("")
        self.CB_Port_name.setSizeAdjustPolicy(QtWidgets.QComboBox.AdjustToMinimumContentsLengthWithIcon)
        self.CB_Port_name.setObjectName("CB_Port_name")
        self.CB_Baud_rate = QtWidgets.QComboBox(self.F_Connect)
        self.CB_Baud_rate.setGeometry(QtCore.QRect(160, 55, 91, 30))
        palette = QtGui.QPalette()
        self.CB_Baud_rate.setPalette(palette)
        font = QtGui.QFont()
        font.setFamily("Cambria")
        font.setPointSize(15)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.CB_Baud_rate.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.CB_Baud_rate.setContextMenuPolicy(QtCore.Qt.DefaultContextMenu)
        self.CB_Baud_rate.setFont(font)
        self.CB_Baud_rate.setStyleSheet("""
            QComboBox{
                font: 15px Cambria;  
            }                                 
            QComboBox QAbstractItemView::item {
                border-radius : 0px;
            }""")
        self.CB_Baud_rate.setEditable(False)
        self.CB_Baud_rate.setCurrentText("")
        self.CB_Baud_rate.setSizeAdjustPolicy(QtWidgets.QComboBox.AdjustToMinimumContentsLengthWithIcon)
        self.CB_Baud_rate.setObjectName("CB_Baud_rate")
        self.B_Power = QtWidgets.QPushButton(self.F_Connect)
        self.B_Power.setGeometry(QtCore.QRect(260, 20, 60, 60))
        self.B_Power.setStyleSheet("QPushButton{\n"
"    border-radius: 30px;\n"
"}")
        self.B_Power.setText("")
        icon7 = QtGui.QIcon()
        icon7.addPixmap(QtGui.QPixmap(".\\UI\\../picture/on.gif"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.B_Power.setIcon(icon7)
        self.B_Power.setIconSize(QtCore.QSize(60, 60))
        self.B_Power.setObjectName("B_Power")
        self.Logo = QtWidgets.QPushButton(Header)
        self.Logo.setGeometry(QtCore.QRect(20, 15, 80, 80))
        self.Logo.setStyleSheet("QPushButton{\n"
"    border: none;\n"
"}")
        self.Logo.setText("")
        icon8 = QtGui.QIcon()
        icon8.addPixmap(QtGui.QPixmap(".\\UI\\../picture/logo_ute.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.Logo.setIcon(icon8)
        self.Logo.setIconSize(QtCore.QSize(80, 80))
        self.Logo.setObjectName("Logo")

        self.Set_Event()
        self.retranslateUi(Header)
        QtCore.QMetaObject.connectSlotsByName(Header)

    def retranslateUi(self, Header):
        _translate = QtCore.QCoreApplication.translate
        self.L_Menu.setText(_translate("Header", "Kinematics"))
        self.L_Port_name.setText(_translate("Header", "PORT NAME"))
        self.L_Baud_rate.setText(_translate("Header", "BAUD RATE"))
#endregion
#=============================
#region Event
    def Set_Event(self):
        self.Logo.clicked.connect(self.Click_Logo)

        #region Control
        self.F_Control.setEnabled(False)

        self.B_Home.clicked.connect(self.Click_B_Home)
        self.B_Home.pressed.connect(lambda: self.B_Home.setIconSize(QtCore.QSize(60, 60)))
        self.B_Home.released.connect(lambda: self.B_Home.setIconSize(QtCore.QSize(70, 70)))

        self.B_Zero.clicked.connect(self.Click_B_Zero)
        self.add_effect(self.B_Zero)

        self.B_Reset.clicked.connect(lambda: signal.click_B_Reset.emit())
        self.add_effect(self.B_Reset)

        self.B_Drag_Drop.clicked.connect(self.Click_B_Drag_Drop)
        self.add_effect(self.B_Drag_Drop)

        self.B_Pause_Run.clicked.connect(self.Click_B_Pause_Run)
        self.add_effect(self.B_Pause_Run)

        self.B_Info.clicked.connect(self.Click_B_Info)
        self.add_effect(self.B_Info)

        self.B_Swich.clicked.connect(self.Click_B_Switch)
        self.add_effect(self.B_Swich)
        #endregion

        #region Connect
        ports = serial.tools.list_ports.comports()
        port_list = []
        # In danh sách các cổng COM và trạng thái của chúng
        for port in ports:
            port_list.append(f"{port.device}")
        self.CB_Port_name.currentTextChanged.connect(self.Changed_Port_COM)
        if(len(port_list) > 0):
            self.CB_Port_name.addItems(port_list)
            self.CB_Port_name.setCurrentText(port_list[0])
            self.ser.port = port_list[0]
        baud_rates = [
        "300", "600", "1200", "2400", "4800", "9600", "14400", 
        "19200", "38400", "57600", "115200", "230400", "460800", 
        "921600", "1500000", "3000000"
        ]
        for baud_rate in baud_rates:
            self.CB_Baud_rate.addItem(baud_rate)
        self.CB_Baud_rate.setCurrentText("115200")
        self.CB_Baud_rate.currentTextChanged.connect(self.Changed_Baud_rate)

        self.ser.baudrate = 115200
        self.ser.timeout = 1

        self.B_Power.clicked.connect(self.Click_B_Power)
        signal.close_Screen.connect(lambda: self.ser.close())
        
        #endregion

        #region Send UART
        signal.Send.connect(self.Send_String)
        signal.Data_FK_Theta1.connect(self.Change_Theta1)
        signal.Data_FK_Theta2.connect(self.Change_Theta2)
        signal.Data_FK_Theta3.connect(self.Change_Theta3)
        signal.Data_FK_Theta.connect(self.Change_Theta)
        signal.Data_IK.connect(self.B_Run_IK)
        #endregion

        #region MP
        signal.Data_MP.connect(self.Receiver_Data_MP)
        #endregion

#region Event & Effect
    def add_effect(self, button):
        button.pressed.connect(lambda: button.setIconSize(QtCore.QSize(50, 50)))
        button.released.connect(lambda: button.setIconSize(QtCore.QSize(60, 60)))

    def Click_Logo(self):
        signal.click_Logo.emit()

#endregion

#region Contorl 
    def Click_B_Zero(self):
        data_send = "t1:0,t2:0,t3:0,t4:0\n"
        self.ser.write(data_send.encode('utf-8'))
        signal.click_B_Zero.emit()
        self.Thetas = [0, 0, 0, 0]

    def Click_B_Home(self):
        self.ser.write("home\n".encode('utf-8'))
        signal.click_B_Home.emit()
        self.Thetas = [0, 0, 0, 0]

    def Click_B_Drag_Drop(self):
        if self.Drag_Drop:
            signal.click_B_Drag_Drop.emit(False)
            self.Drag_Drop = False
            self.B_Drag_Drop.setIcon(QtGui.QIcon("picture/grab.png"))
            self.ser.write("hut\n".encode('utf-8'))
        else:
            signal.click_B_Drag_Drop.emit(True)
            self.Drag_Drop = True
            self.B_Drag_Drop.setIcon(QtGui.QIcon("picture/drop.png"))
            self.ser.write("nha\n".encode('utf-8'))
        
    def Click_B_Pause_Run(self):
        if self.Pause_Run:
            signal.click_B_Pause_Run.emit(False)
            self.Pause_Run = False
            self.B_Pause_Run.setIcon(QtGui.QIcon("picture/pause.png"))
        else:
            signal.click_B_Pause_Run.emit(True)
            self.Pause_Run = True
            self.B_Pause_Run.setIcon(QtGui.QIcon("picture/run.png"))

    def Click_B_Info(self):
        message_box = QtWidgets.QMessageBox()
        message_box.setWindowTitle("Information Icon")
        message_box.setWindowIcon(QtGui.QIcon("picture/information.png"))
        message_box.setIcon(QtWidgets.QMessageBox.Information)
        
        # Setting the message content with multiple lines
        message_box.setText("Information Message Box")
        message_box.setInformativeText("""
            Home icon: Reset position for Robot
            Zero icon: Control theta1 ~ theta4 = 0
            Reset icon: Reset full variation on screen
            Magnet icon: It's allow control magnet keep or release
            Pause icon: It's allow stop or continue Robot immediately
            Info icon: Show infomation about icon
            Switch icon: Allow to switch mode for control Robot 
            Some mode: Home, Auto Grab, Manipulation
                You can out Screen with click on Logo HCMUTE
        """)
        message_box.setStandardButtons(QtWidgets.QMessageBox.Ok)

        font = QtGui.QFont("Times New Roman", 12)
        message_box.setFont(font)
        
        # Show the message box
        message_box.exec_()

    def Click_B_Switch(self):
        if self.Number_Mode == 2:
            self.Number_Mode = 0
        else:
            self.Number_Mode += 1
        
        signal.click_B_Switch.emit(self.Number_Mode)
        self.L_Menu.setText(self.Name_mode[self.Number_Mode])

#endregion

#region Connect
    def Changed_Port_COM(self):
        self.ser.port = self.CB_Port_name.currentText()

    def Changed_Baud_rate(self):
        self.ser.baudrate = int(self.CB_Baud_rate.currentText())

    def Click_B_Power(self):
        if self.ser.port != None:
            if self.ser.is_open:
                self.thread.stop()
                self.ser.close()
                self.B_Power.setIcon(QtGui.QIcon("picture/on.gif"))
                self.F_Control.setEnabled(False)
                signal.State_Com.emit(False)

                message_box = QtWidgets.QMessageBox()
                message_box.setWindowTitle("Disconnect")
                message_box.setWindowIcon(QtGui.QIcon("picture/information.png"))
                message_box.setIcon(QtWidgets.QMessageBox.Information)
                message_box.setText("COM port is closed ")
                message_box.setStandardButtons(QtWidgets.QMessageBox.Ok)
                message_box.exec_()
            else:
                self.ser.open()
                time.sleep(0.1)
                self.B_Power.setIcon(QtGui.QIcon("picture/off.gif"))
                self.F_Control.setEnabled(True)
                signal.State_Com.emit(True)
                self.thread.start() 
        else:
            message_box = QtWidgets.QMessageBox()
            message_box.setWindowTitle("Port COM don't have")
            message_box.setWindowIcon(QtGui.QIcon("picture/information.png"))
            message_box.setIcon(QtWidgets.QMessageBox.Information)

            message_box.setText("Check COM port and press logo UTE to update COM port")

            font = QtGui.QFont("Times New Roman", 12)
            message_box.setFont(font)
            
            message_box.exec_()
#endregion

#region Send UART
    def Send_String(self, data:str):
        self.ser.write(data.encode('utf-8'))

    def Change_Theta1(self, data):
        self.Thetas[0] = data
        data_send = f"t1:{self.Thetas[0]},t2:{self.Thetas[1]},t3:{self.Thetas[2]},t4:{self.Thetas[3]- self.Thetas[2] - self.Thetas[1]}\n"
        self.ser.write(data_send.encode('utf-8'))
 
    def Change_Theta2(self, data):
        self.Thetas[1] = data
        data_send = f"t1:{self.Thetas[0]},t2:{self.Thetas[1]},t3:{self.Thetas[2]},t4:{self.Thetas[3]- self.Thetas[2] - self.Thetas[1]}\n"
        self.ser.write(data_send.encode('utf-8'))

    def Change_Theta3(self, data):
        self.Thetas[2] = data
        data_send = f"t1:{self.Thetas[0]},t2:{self.Thetas[1]},t3:{self.Thetas[2]},t4:{self.Thetas[3]- self.Thetas[2] - self.Thetas[1]}\n"
        self.ser.write(data_send.encode('utf-8'))

    def Change_Theta(self, data):
        self.Thetas[3] = data
        data_send = f"t1:{self.Thetas[0]},t2:{self.Thetas[1]},t3:{self.Thetas[2]},t4:{self.Thetas[3]- self.Thetas[2] - self.Thetas[1]}\n"
        self.ser.write(data_send.encode('utf-8'))

    def B_Run_IK(self,data):
        data_send = "t1:{},t2:{},t3:{},t4:{}\n".format(*data)
        self.ser.write(data_send.encode('utf-8'))
#endregion

#region Receiver Data from Port
    def Update_Current_Position(self):
        try:
            if self.ser.in_waiting > 0:  # Kiểm tra xem có dữ liệu đến không
                data_receiver = self.ser.readline().decode('utf-8').rstrip()  # Đọc dòng dữ liệu
                data_pos = []
                if data_receiver.startswith("t1:"):
                    parts = data_receiver.split(',')

                    data_Current_Position = []
                    for part in parts:
                        # Tách dấu ':'
                        pos = part.split(':')
                        if len(pos) == 2:
                            value = pos[1].strip()
                            data_Current_Position.append(float(value))
                    if len(data_Current_Position) == 4:
                        data_pos = Forward_Kinematics(data_Current_Position)
                        data_Current_Position.extend(data_pos)
                        signal.Data_Current_Position.emit(data_Current_Position) 

                if self.run:
                    if  abs(self.px - data_pos[0]) < 5 and abs(self.py - data_pos[1]) < 5\
                        and abs(self.pz - data_pos[2]) < 5:
                        self.run = False
                        signal.Run_OK.emit()

        except:
            pass
#endregion

#region MP
    def Receiver_Data_MP(self, data:str):
        
        # Tách chuỗi bằng ký tự "~"
        parts = data.split("~")

        # Tách các giá trị của phần đầu tiên bằng dấu ';'
        pos = parts[0].split('[')[1].split(']')[0]
        pos = pos.split(',')

        self.px, self.py, self.pz = float(pos[0]), float(pos[1]), float(pos[2])
        # Lấy phần sau "~" và loại bỏ dấu ngoặc vuông []
        theta = parts[1].strip(" []").split(",")

        # Kiểm tra phần tử cuối cùng (loại bỏ dấu ']' nếu có)
        if theta[-1] == "Drop":
            theta[-1] = "0"
        elif theta[-1] == "Drag":
            theta[-1] = "1" 
        # Tạo lại chuỗi sau khi thay đổi phần tử cuối
        data_send = ",".join(theta).strip(" ")
        data_send = f"qd[{data_send}]\n"
        # data_send = f"t1:{theta[0]},t2:{theta[1]},t3:{theta[2]},t4:{theta[3]}\n"
        self.run = True
        self.ser.write(data_send.encode('utf-8'))
#endregion

class UpdateThread(QtCore.QThread):
    signal = QtCore.pyqtSignal()
    def __init__(self): 
        super().__init__()
        self.running = True

    def run(self):
        self.running = True
        while self.running:
            self.signal.emit()
            time.sleep(0.05)
            
    def stop(self): 
        self.running = False