# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '.\UI\Image_Processing.ui'
#
# Created by: PyQt5 UI code generator 5.15.11
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from Storage_Signal import signal
import cv2
import numpy as np
from Recipe_Kinematics import Inverse_Kinematics

style_off = """QPushButton{    
    background-color: rgb(97, 97, 97);
    border: 2px solid 0CEEFFA;
    color: #CEEFFA;
    border-top-color: rgb(88, 88, 88);
    border-radius: 10px; 
}"""
style_on = """QPushButton{    
    background-color: #0D706E;
    border: 2px solid 0CEEFFA;
    color: #CEEFFA;
    border-top-color: rgb(88, 88, 88);
    border-radius: 10px;
}"""
# Tọa độ gốc
origin_x, origin_y = 250, 150

#region IP

posx = np.zeros(20)
posy = np.zeros(20)

# Tỷ lệ pixel sang mm (12 pixel = 10mm)
pixel_to_mm = 10 / 12  # 0.8333 mm per pixel

# Các tọa độ để crop
crop_x1, crop_y1 = 99, 93
crop_x2, crop_y2 = 650, 500

def non_max_suppression(boxes, scores, overlapThresh):
    if len(boxes) == 0:
        return []

    boxes = np.array(boxes)
    scores = np.array(scores)

    x1 = boxes[:, 0]
    y1 = boxes[:, 1]
    x2 = boxes[:, 2]
    y2 = boxes[:, 3]
    area = (x2 - x1 + 1) * (y2 - y1 + 1)

    idxs = np.argsort(scores)
    selected_boxes = []

    while len(idxs) > 0:
        last = len(idxs) - 1
        i = idxs[last]
        selected_boxes.append(boxes[i])

        xx1 = np.maximum(x1[i], x1[idxs[:-1]])
        yy1 = np.maximum(y1[i], y1[idxs[:-1]])
        xx2 = np.minimum(x2[i], x2[idxs[:-1]])
        yy2 = np.minimum(y2[i], y2[idxs[:-1]])

        w = np.maximum(0, xx2 - xx1 + 1)
        h = np.maximum(0, yy2 - yy1 + 1)
        overlap = (w * h) / area[idxs[:-1]]

        idxs = np.delete(idxs, np.concatenate(([last], np.where(overlap > overlapThresh)[0])))

    return selected_boxes

#endregion

class Ui_Image_Processing(object):
    def setupUi(self, Image_Processing):
        self.F_Image_Processing = QtWidgets.QFrame(Image_Processing)
        self.F_Image_Processing.setGeometry(QtCore.QRect(10, 119, 1041, 531))
        self.F_Image_Processing.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.F_Image_Processing.setFrameShadow(QtWidgets.QFrame.Raised)
        self.F_Image_Processing.setObjectName("F_Image_Processing")
        self.Camera = QtWidgets.QLabel(self.F_Image_Processing)
        self.Camera.setGeometry(QtCore.QRect(10, 140, 680, 380))
        self.Camera.setStyleSheet("QLabel{\n""border:1px solid;\n""}")
        self.Camera.setText("")
        self.Camera.setObjectName("Camera")
        self.B_Capture = QtWidgets.QPushButton(self.F_Image_Processing)
        self.B_Capture.setGeometry(QtCore.QRect(790, 60, 141, 41))
        font = QtGui.QFont()
        font.setFamily("Courier")
        font.setPointSize(15)
        font.setBold(True)
        font.setWeight(75)
        self.B_Capture.setFont(font)
        self.B_Capture.setStyleSheet("QPushButton{    \n"
"    background-color: #0D706E;\n"
"    border: 2px solid 0CEEFFA;\n"
"    color: #CEEFFA;\n"
"    border-top-color: rgb(88, 88, 88);\n"
"    border-radius: 10px; \n"
"}")
        self.B_Capture.setObjectName("B_Capture")
        self.B_Mode1 = QtWidgets.QPushButton(self.F_Image_Processing)
        self.B_Mode1.setGeometry(QtCore.QRect(720, 120, 141, 41))
        font = QtGui.QFont()
        font.setFamily("Courier")
        font.setPointSize(15)
        font.setBold(True)
        font.setWeight(75)
        self.B_Mode1.setFont(font)
        self.B_Mode1.setStyleSheet("QPushButton{    \n"
"    background-color: rgb(97, 97, 97);\n"
"    border: 2px solid 0CEEFFA;\n"
"    color: #CEEFFA;\n"
"    border-top-color: rgb(88, 88, 88);\n"
"    border-radius: 10px; \n"
"}")
        self.B_Mode1.setObjectName("B_Mode1")
        self.B_Mode2 = QtWidgets.QPushButton(self.F_Image_Processing)
        self.B_Mode2.setGeometry(QtCore.QRect(880, 120, 141, 41))
        font = QtGui.QFont()
        font.setFamily("Courier")
        font.setPointSize(15)
        font.setBold(True)
        font.setWeight(75)
        self.B_Mode2.setFont(font)
        self.B_Mode2.setStyleSheet("QPushButton{    \n"
"    background-color: #0D706E;\n"
"    border: 2px solid 0CEEFFA;\n"
"    color: #CEEFFA;\n"
"    border-top-color: rgb(88, 88, 88);\n"
"    border-radius: 10px; \n"
"}")
        self.B_Mode2.setObjectName("B_Mode2")
        self.B_C_Reset = QtWidgets.QPushButton(self.F_Image_Processing)
        self.B_C_Reset.setGeometry(QtCore.QRect(730, 470, 111, 41))
        font = QtGui.QFont()
        font.setFamily("Courier")
        font.setPointSize(15)
        font.setBold(True)
        font.setWeight(75)
        self.B_C_Reset.setFont(font)
        self.B_C_Reset.setStyleSheet("QPushButton{    \n"
"    background-color: #0D706E;\n"
"    border: 2px solid 0CEEFFA;\n"
"    color: #CEEFFA;\n"
"    border-top-color: rgb(88, 88, 88);\n"
"    border-radius: 10px; \n"
"}")
        self.B_C_Reset.setObjectName("B_C_Reset")
        self.Position_List = QtWidgets.QListWidget(self.F_Image_Processing)
        self.Position_List.setGeometry(QtCore.QRect(720, 180, 301, 271))
        self.Position_List.setStyleSheet("""
    QListWidget {
        background-color: rgb(240,240,240);  /* Màu nền của toàn bộ list */
    }
    QListWidget::item {
        background-color: #f0f0f0;  /* Màu nền của từng item */
        padding: 5px;
        margin: 2px;
    }
    QListWidget::item:selected {
        background-color: #CEEFFA;  /* Màu nền khi item được chọn */
        color: #0D706E;  /* Màu chữ khi item được chọn */
        background: transparent;
    }
    QListWidget::item:hover {
        background-color: #e0e0e0;  /* Màu nền khi di chuột qua */
    }
""")
        self.Position_List.setItemAlignment(QtCore.Qt.AlignLeading)
        self.Position_List.setObjectName("Position_List")
        self.L_Camera = QtWidgets.QPushButton(self.F_Image_Processing)
        self.L_Camera.setGeometry(QtCore.QRect(160, 40, 361, 81))
        font = QtGui.QFont()
        font.setFamily("Century")
        font.setPointSize(50)
        font.setBold(True)
        font.setWeight(75)
        self.L_Camera.setFont(font)
        self.L_Camera.setStyleSheet("QPushButton{\n"
"    border: none;    \n"
"    background-color: rgb(240, 240, 240);\n"
"}")
        self.L_Camera.setObjectName("L_Camera")
        self.B_Detect = QtWidgets.QPushButton(self.F_Image_Processing)
        self.B_Detect.setGeometry(QtCore.QRect(790, 10, 141, 41))
        font = QtGui.QFont()
        font.setFamily("Courier")
        font.setPointSize(15)
        font.setBold(True)
        font.setWeight(75)
        self.B_Detect.setFont(font)
        self.B_Detect.setStyleSheet("QPushButton{    \n"
"    background-color: #0D706E;\n"
"    border: 2px solid 0CEEFFA;\n"
"    color: #CEEFFA;\n"
"    border-top-color: rgb(88, 88, 88);\n"
"    border-radius: 10px; \n"
"}")
        self.B_Detect.setObjectName("B_Detect")
        self.B_C_Run = QtWidgets.QPushButton(self.F_Image_Processing)
        self.B_C_Run.setGeometry(QtCore.QRect(880, 470, 111, 41))
        font = QtGui.QFont()
        font.setFamily("Courier")
        font.setPointSize(15)
        font.setBold(True)
        font.setWeight(75)
        self.B_C_Run.setFont(font)
        self.B_C_Run.setStyleSheet("QPushButton{    \n"
"    background-color: #0D706E;\n"
"    border: 2px solid 0CEEFFA;\n"
"    color: #CEEFFA;\n"
"    border-top-color: rgb(88, 88, 88);\n"
"    border-radius: 10px; \n"
"}")
        self.B_C_Run.setObjectName("B_C_Run")
        
        self.SetEvent()
        self.retranslateUi(Image_Processing)
        QtCore.QMetaObject.connectSlotsByName(Image_Processing)

    def retranslateUi(self, Image_Processing):
        _translate = QtCore.QCoreApplication.translate
        Image_Processing.setWindowTitle(_translate("Image_Processing", "Form"))
        self.B_Capture.setText(_translate("Image_Processing", "CAPTURE"))
        self.B_Mode1.setText(_translate("Image_Processing", "MODE 1"))
        self.B_Mode2.setText(_translate("Image_Processing", "MODE2"))
        self.B_C_Reset.setText(_translate("Image_Processing", "RESET"))
        self.L_Camera.setText(_translate("Image_Processing", "CAMERA"))
        self.B_Detect.setText(_translate("Image_Processing", "DETECT"))
        self.B_C_Run.setText(_translate("Image_Processing", "RUN"))

#======================================================
    def SetEvent(self):
        self.B_Detect.clicked.connect(self.Click_B_Detect)
        self.B_Capture.clicked.connect(self.Click_B_Capture)
        self.B_Mode1.clicked.connect(self.Click_B_Mode1)
        self.B_Mode2.clicked.connect(self.Click_B_Mode2)
        self.B_C_Reset.clicked.connect(self.Click_B_C_Reset)
        self.B_C_Run.clicked.connect(self.Click_B_C_Run)
        signal.click_B_Switch.connect(self.Number_Page)
        signal.Run_OK.connect(self.Run_MP)
        signal.click_B_Pause_Run.connect(self.Click_B_Pause_Run)

        self.Fixed = 0
        self.Mode = 1
        self.Pos_nut = []
        self.number_running = 0
        self.number_running_process = 0
        self.run = True
        self.open = False
        self.receiv_Pos =False
        #Tạo đa luồng
        self.timer = QtCore.QTimer()
        self.timer.timeout.connect(self.Detect_Camera) 
        self.timer.stop()

    def Number_Page(self,data):
        if data == 1:
            # Mở camera
            self.cap = cv2.VideoCapture(0)  # `1` là camera phụ, thay đổi nếu cần
            if not self.cap.isOpened():
                message_box = QtWidgets.QMessageBox()
                message_box.setWindowTitle("Camera is not open")
                message_box.setWindowIcon(QtGui.QIcon("picture/error.png"))
                message_box.move(160, 340)

                message_box.setText(f"""Camera is unvalable, please check again""")
                font = QtGui.QFont("Times New Roman", 12)
                message_box.setFont(font)
                
                message_box.exec_()
            else:
                self.timer.start(100)
                self.open = True
        else:
            self.cap.release()
            cv2.destroyAllWindows()
            self.timer.stop()
            self.open = False
            # Giải phóng tài nguyên

#region UI
    def Click_B_Detect(self):
        signal.Data_IK.emit([35, 0, 0, 0])

    def Click_B_Capture(self):
        self.Position_List.clear()
        self.receiv_Pos = True
        self.Detect_Camera()
        # Tạo chuỗi format theo yêu cầu
        for item in self.Pos_nut:
            item = QtWidgets.QListWidgetItem\
                (f"Value: [Px:{float(item[1])+150:.3f}, Py:{item[0]}, color:{item[2]}]")
            font = QtGui.QFont("Times New Roman", 12, QtGui.QFont.Bold)  # Đặt font: Arial, cỡ 16, in đậm
            item.setFont(font)  # Áp dụng font cho item
            # Thêm vào View
            self.Position_List.addItem(item)

    def Click_B_Mode1(self):
        self.Mode = 1
        self.B_Mode1.setStyleSheet(style_on)
        self.B_Mode2.setStyleSheet(style_off)

    def Click_B_Mode2(self):
        self.Mode = 2
        self.B_Mode1.setStyleSheet(style_off)
        self.B_Mode2.setStyleSheet(style_on)

    def Click_B_C_Reset(self):
        None

    def Click_B_C_Run(self):
        self.number_running = 0
        self.number_running_process = 0
        self.Run_MP()
        
    def Run_MP(self):
        if self.Fixed == 1:
            compesant = 10
        elif self.Fixed == 2:
            compesant = -10
        else:
            compesant = 0

        if self.run and self.open:
            if(self.number_running == self.Position_List.count()):
                self.number_running = 0
                self.Click_B_Capture()
                try:
                    if len(self.Pos_nut[0]) != 0:
                        self.Fixed += 1
                        self.Click_B_C_Run()
                    else:
                        compesant = 0
                        string_send = "nha\n"
                        signal.Send.emit(string_send)
                except:
                    compesant = 0
                    string_send = "nha\n"
                    signal.Send.emit(string_send)
                return
            #Xử lý chuỗi
            if self.number_running_process == 0:
                posx = float(self.Pos_nut[self.number_running][1]) + 150
                posy =  float(self.Pos_nut[self.number_running][0])
                posz = 60
                grab = "1"
                self.number_running_process += 1
            elif self.number_running_process == 1:
                posx = float(self.Pos_nut[self.number_running][1]) + 150
                posy =  float(self.Pos_nut[self.number_running][0]) + compesant
                posz = 0
                grab = "1"
                if posy < -30:
                    posy += 10
                    posz -= 3
                self.number_running_process += 1
            elif self.number_running_process == 2:
                if self.Pos_nut[self.number_running][2] == "Green":
                    posx = 100
                    posy = -150
                elif self.Pos_nut[self.number_running][2] == "Red":
                    posx = 200
                    posy = -150
                elif self.Pos_nut[self.number_running][2] == "Blue":
                    posx = 200
                    posy = 150
                posz = 50                
                grab = "0"                
                self.number_running += 1
                self.number_running_process = 0  
                    
            thetas = Inverse_Kinematics([posx, posy, posz, -90])

            string_send = f"[{posx:.2f},{posy:.2f},{posz}] ~ [{thetas[1][0]},{thetas[1][1]},{thetas[1][2]},{thetas[1][3]},1000,{grab}]"

            signal.Data_MP.emit(string_send)

    def Click_B_Pause_Run(self, data):
        self.run = not data
        if self.run:
            self.Run_MP()
#endregion

    def Detect_Camera(self):
        ret, frame = self.cap.read()
        if not ret:
            print("Không nhận được khung hình từ camera")
            return

        cropped_frame = frame[crop_y1:crop_y2, crop_x1:crop_x2]
        hsv = cv2.cvtColor(cropped_frame, cv2.COLOR_BGR2HSV)

        # Mask các màu
        mask_blue = cv2.inRange(hsv, np.array([100, 100, 50]), np.array([130, 255, 255]))
        mask_red1 = cv2.inRange(hsv, np.array([0, 100, 50]), np.array([10, 255, 255]))
        mask_red2 = cv2.inRange(hsv, np.array([160, 100, 50]), np.array([180, 255, 255]))
        mask_red = cv2.bitwise_or(mask_red1, mask_red2)
        mask_green = cv2.inRange(hsv, np.array([40, 100, 50]), np.array([85, 255, 255]))

        masks = {
            'Blue': mask_blue,
            'Red': mask_red,
            'Green': mask_green
        }

        mm_coordinates = []

        for color_name, mask in masks.items():
            contours, _ = cv2.findContours(mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
            for cnt in contours:
                area = cv2.contourArea(cnt)
                if area > 500:
                    x, y, w, h = cv2.boundingRect(cnt)
                    center_x = x + w // 2
                    center_y = y + h // 2

                    offset_x = center_x - origin_x
                    offset_y = center_y - origin_y
                    mm_x = offset_x * pixel_to_mm
                    mm_y = offset_y * pixel_to_mm

                    mm_coordinates.append((str(round(mm_x, 2)), str(round(mm_y, 2)), color_name))

                    cv2.rectangle(cropped_frame, (x, y), (x + w, y + h), (0, 255, 0), 2)
                    cv2.circle(cropped_frame, (center_x, center_y), 5, (0, 0, 255), -1)
                    cv2.putText(cropped_frame, f"{color_name}, {mm_x:.1f}, {mm_y:.1f}",
                                (x, y - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 255), 2)
                    
        # Hiển thị camera
        # Tính lại tọa độ gốc so với ảnh đã crop
        adjusted_origin_x = origin_x
        adjusted_origin_y = origin_y 

        # Vẽ điểm gốc và nhãn
        cv2.circle(cropped_frame, (adjusted_origin_x, adjusted_origin_y), 5, (255, 0, 0), -1)
        cv2.putText(cropped_frame, "Point", (adjusted_origin_x + 5, adjusted_origin_y - 5),
                    cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 0, 0), 2)
        rgb_frame = cv2.cvtColor(cropped_frame, cv2.COLOR_BGR2RGB)
        height, width, channels = rgb_frame.shape
        bytes_per_line = channels * width
        q_img = QtGui.QImage(rgb_frame.data, width, height, bytes_per_line, QtGui.QImage.Format_RGB888)
        pixmap = QtGui.QPixmap.fromImage(q_img)
        pixmap = pixmap.scaled(680, 500, QtCore.Qt.KeepAspectRatio)
        self.Camera.setPixmap(pixmap)

        if self.receiv_Pos:
            self.Pos_nut = mm_coordinates
            self.receiv_Pos = False